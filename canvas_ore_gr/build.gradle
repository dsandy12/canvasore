/*
plugins {
  id 'application'
  id 'eclipse'
  id 'org.openjfx.javafxplugin' version '0.0.8'
  id 'org.beryx.jlink' version '2.12.0'
}

// use default repositories
repositories {
    mavenCentral()
}

// configure the javafx plugin.  By default it will use the binaries
// for this platform.  By setting the configuration to 'compileOnly'
// the binaries are not included.  These need to be provided separately
// in a different build step

javafx {
    version = "13"
    modules = [ 'javafx.graphics', 'javafx.media', 'javafx.swing', 
                'javafx.web', 'javafx.controls', 'javafx.fxml']
    
    // do not include the native binaries.  This is to enable cross-platform
    // distribution.  The native binaries will need to be added in a future 
    // step
    configuration = 'compileOnly'
}

mainClassName = "$moduleName/edu.asu.dlsandy.CanvasOre"

eclipse {
    classpath {
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') }.each {
                    it.entryAttributes['module'] = 'true'
                }
            }
        }
    }
}

jlink {
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	addExtraDependencies("javafx")
    //targetPlatform("mac") {
    //    jdkHome = "/usr/lib/jvm/mac/jdk-13.0.2"
    //    addExtraModulePath("/usr/lib/openjfx/mac/jmods/lib")
    //}
    targetPlatform("win") {
        jdkHome = "/usr/lib/jvm/win/jdk-13.0.2"
        addExtraModulePath("/usr/lib/openjfx/win/jmods")
    }
    launcher {
        name = 'canvas_ore'
    }
}
*/
plugins {
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin'      version '0.0.8'
    id 'org.beryx.jlink'               version '2.17.2'
}

// Application Configuration
ext {
    appName = "FXApp"
    appLauncher = "fxapp"
    appPackaging = "fxapp"
    appModuleName = "canvas_ore_gr"
    appMainClass = "edu.asu.dlsandy.CanvasOre"
}

mainClassName = "${ext.appModuleName}/${ext.appMainClass}"

repositories {
    mavenCentral()
}

javafx {
    version = "13"
    modules = [ 'javafx.graphics', 
    			'javafx.media', 
    			'javafx.swing', 
                'javafx.web', 
                'javafx.controls', 
                'javafx.fxml'
              ]
}

jlink {
    imageZip = project.file("${buildDir}/distributions/${appPackaging}-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${appLauncher}"
    }
    jpackage {
    	// Set the environment property BADASS_JLINK_JPACKAGE_HOME or explicitly configure the below property
    	jpackageHome = '/usr/lib/jvm/win/jdk-14'
	    //jvmArgs = ['-splash:$APPDIR/splash.png']
	    //imageOptions = ['--icon', 'src/main/resources/java.ico']
	    //installerOptions = [
	    //        '--file-associations', 'src/main/resources/associations.properties',
	    //        '--app-version', version,
	    //]
	    if (org.gradle.internal.os.OperatingSystem.current().windows) {
	        installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu']
	    }
	}
}

task dist {
    dependsOn clean, jlinkZip
    description "Calls clean and then jlinkZip [default]"
}

defaultTasks 'dist'

if (project.hasProperty('debugRun') && project.debugRun as boolean) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=*:5005'
    }
}

eclipse {
    classpath {
        containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
        file {
            whenMerged {
                entries.findAll { it.properties.kind.equals('lib') && !it.properties.path.contains("junit") }.each {
                    it.entryAttributes['module'] = 'true'
                }
                entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                    it.entryAttributes['module'] = 'true'
                }

            }
        }
    }
}

